kind: pipeline
name: default

steps:
- name: publish
  image: golang
  environment:
    GOOS: linux
    PASSWORD:
      from_secret: password

- name: message
  image: ubuntu
  environment:
    BLABLA: linux
    AWS_DEFAULT_REGION: us-east-1
    KUBECONFIG: /drone/src/eks/terraform/kubeconfig
    fluxValuesFile: /drone/src/eks/flux/values-preprod.yaml
    ANSIBLE_CONFIG: /drone/src/eks/secrets/devops/flux/ansible.cfg
    PASSWORD:
      from_secret: password
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY    
    FLUX_VAULT_PASSWORD:
      from_secret: FLUX_VAULT_PASSWORD 
    KIAM_VAULT_PASSWORD:
      from_secret: KIAM_VAULT_PASSWORD
  commands:
  - apt-get update
  - apt-get install unzip
  - apt-get install -y wget
  - wget https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_linux_amd64.zip
  - unzip terraform_0.11.10_linux_amd64.zip
  - mv terraform /usr/local/bin/
  - terraform --version 
  - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.11.0-linux-amd64.tar.gz
  - tar -zxvf helm-v2.11.0-linux-amd64.tar.gz
  - ls -ltra
  - mv linux-amd64/helm /usr/local/bin/helm
  - helm help
  - echo "hello world"
  - pwd
  - ls -ltra
  - cp README.md README.md1
  - ls -ltra
  - cp eks/terraform/preprod/* eks/terraform/.
  - ls -ltra
  - ls -ltrs eks/terraform/
  - cd eks/terraform/
  - pwd
  - printenv
  - terraform init
  - terraform plan -out kubernetes.tfplan -input=false
  - terraform apply kubernetes.tfplan
  - # getting kubeconfig
  - terraform output kubeconfig > kubeconfig
  - chmod 0777 kubeconfig
  - #https://docs.docker.com/install/linux/docker-ce/ubuntu/
  - apt-get install -y software-properties-common
  - apt-add-repository --yes --update ppa:ansible/ansible
  - apt-get install -y python3-pip python3-dev
  - pip3 install ansible==2.7.0
  - pip3 install openshift
  - #apt-get install -y ansible
  - ansible --version
  - #apt-get install -y gnupg2 gnupg gnupg1
  - apt-get install -y apt-transport-https curl
  - wget https://storage.googleapis.com/kubernetes-release/release/v1.12.3/bin/linux/amd64/kubectl
  - chmod u+x kubectl
  - mv kubectl /usr/local/bin/kubectl
  - #kubectl version
  - #kubectl apply -f config.yml
  - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
  - chmod +x ./aws-iam-authenticator
  - cp ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
  - aws-iam-authenticator help
  - ls -ltra
  - ls /usr/local/bin/*
  - which kubectl
  - echo $FLUX_VAULT_PASSWORD > vault-password
  - echo $KIAM_VAULT_PASSWORD > kiam-vault-password
  - cat vault-password
  - ansible-playbook /drone/src/eks/secrets/devops/flux/site.yml --vault-password-file=vault-password
  - ansible-playbook /drone/src/eks/secrets/devops/fluxcloud/site.yml --vault-password-file=vault-password
  - ansible-playbook /drone/src/eks/secrets/devops/kiam/site.yml --vault-password-file=kiam-vault-password
  - # Add users to config map
  - # Single quotes for environment vars
  - terraform output config-map-aws-auth > config.yml
  - printf "\n" >> users.yml
  - printf "  mapUsers:"" | \n" >> config.yml
  - while IFS="\n" read -r line;
      do printf "    %s\n" "$line" >> config.yml;
    done < users.yml
  - ls
  - cat users.yml
  - cat config.yml
  - #kubectl version
  - ls -ltra
  - cat config.yml
  - printenv
  - pwd
  - cat /drone/src/eks/terraform/kubeconfig
  - kubectl apply -f config.yml --kubeconfig /drone/src/eks/terraform/kubeconfig
  - kubectl apply -f ../tiller/serviceaccount.yml
  - helm init --service-account tiller --node-selectors=dedicated=eks-components --wait --override spec.template.spec.tolerations[0].key="node.kubernetes.io/unschedulable" --override spec.template.spec.tolerations[0].operator="Equal" --override spec.template.spec.tolerations[0].value="true" --override spec.template.spec.tolerations[0].effect="NoSchedule"
  - /bin/bash ../kiam/kiam.sh
  - /bin/bash ../flux/flux.sh
  - /bin/bash ../fluxcloud/fluxcloud.sh